{"version":3,"sources":["pages/common/logo.svg","pages/common/icon-info-circle.svg","pages/common/icon-user-alt.svg","pages/home/icon-search.svg","pages/common/icon-home.svg","pages/common/Header.jsx","pages/home/Image.jsx","pages/home/Tweet.jsx","pages/home/Home.jsx","index.js"],"names":["module","exports","Header","className","href","tabIndex","src","logo","alt","aboutIcon","loginIcon","React","Component","Image","data-src","target","rel","title","Tweet","Home","props","tabs","document","querySelectorAll","imageList","querySelector","tweetList","searchInput","searchFeedback","searchText","resultBlock","tweetBlocks","tweetImages","tweetNames","tweetHandles","tweetTexts","tweetLinks","images","imageUsers","imageView","imageLarge","parentElement","nav","isSearching","bodyElement","animateScroll","style","display","rect","i","getBoundingClientRect","classList","contains","top","documentElement","clientHeight","height","bottom","window","innerHeight","add","onclick","viewImage","onkeypress","e","code","charCode","keyCode","preventDefault","imageIndex","focusControl","getAttribute","enable","newIndex","onscroll","addEventListener","event","value","replace","textContent","hashtag","twitterRequest","XMLHttpRequest","imageRequest","onreadystatechange","displayResults","open","setRequestHeader","send","readyState","status","tweet","results","JSON","parse","responseText","imageResults","statuses","length","remove","user","profile_image_url_https","name","setAttribute","screen_name","full_text","entities","media","media_url_https","background","backgroundSize","backgroundPosition","scrollIntoView","behavior","block","search","this","changeTab","tab","console","log","searchIcon","type","placeholder","spellCheck","maxLength","onClick","id","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.31eda40f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.dbc8b266.svg\";","module.exports = __webpack_public_path__ + \"static/media/icon-info-circle.9a629592.svg\";","module.exports = __webpack_public_path__ + \"static/media/icon-user-alt.04feb91a.svg\";","module.exports = __webpack_public_path__ + \"static/media/icon-search.54e49eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/icon-home.73f20eae.svg\";","// Import base do React\r\nimport React from 'react';\r\n// Import de imagens\r\nimport logo from './logo.svg';\r\nimport homeIcon from './icon-home.svg';\r\nimport aboutIcon from './icon-info-circle.svg';\r\nimport loginIcon from './icon-user-alt.svg';\r\n\r\n// Topo da página - Bloco Header\r\nexport default class Header extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n\r\n            <header className=\"header\">\r\n\r\n                {/* Logo */}\r\n                <a href=\"index.html\" tabIndex=\"0\">\r\n                    <img\r\n                    className=\"header__logo\"\r\n                    src={logo}\r\n                    alt=\"HashtagFinder\"\r\n                    />\r\n                </a>\r\n\r\n                {/* Botões de navegação */}\r\n                <nav className=\"header__navigation\">\r\n                    {/* Atalho para a página do projeto */}\r\n                    {/* TabIndex negativo para evitar a navegação redundante entre o <a> e o <button> do link */}\r\n                    <a href=\"Sobre.html\" tabIndex=\"-1\">\r\n                        <button className=\"header__button button button_theme_light\" tabIndex=\"0\">\r\n                            <img\r\n                                className=\"button__icon\"\r\n                                src={aboutIcon}\r\n                                alt=\"\"\r\n                            />\r\n                            SOBRE\r\n                        </button>\r\n                    </a>\r\n                    {/* Atalho para a página de Login */}\r\n                    {/* TabIndex negativo para evitar a navegação redundante entre o <a> e o <button> do link */}\r\n                    <a href=\"Login.html\" tabIndex=\"-1\">\r\n                        <button className=\"header__button button button_theme_dark\" tabIndex=\"0\">\r\n                            <img\r\n                                className=\"button__icon\"\r\n                                src={loginIcon}\r\n                                alt=\"\"\r\n                            />\r\n                            LOGIN\r\n                        </button>\r\n                    </a>\r\n                </nav>\r\n\r\n            </header>\r\n        );\r\n    }\r\n}","// Importar base do React\r\nimport React from 'react';\r\n\r\n// Bloco de imagem\r\nexport default class Image extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n\r\n            <li className=\"result__image image\" data-src=\"\" tabIndex=\"-1\">\r\n\r\n                {/* Créditos */}\r\n                <p className=\"image__text\">Postado por:</p>\r\n                <a href=\"https://www.twitter.com/\"\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                    tabIndex=\"-1\">\r\n                    <p className=\"image__user\" title=\"\"></p>\r\n                </a>\r\n            </li>\r\n        );\r\n    }\r\n}","// Importar base do React\r\nimport React from 'react';\r\n\r\n// Bloco de tweet\r\nexport default class Tweet extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n\r\n            <li className=\"result__tweet tweet\">\r\n                {/* Imagem de perfil */}\r\n                <img\r\n                    className=\"tweet__image\"\r\n                    src=\"\"\r\n                    alt=\"Foto de perfil\"\r\n                />\r\n                {/* Autor e texto */}\r\n                <div className=\"tweet__main\">\r\n                    {/* Nome e @ do usuário */}\r\n                    <div className=\"tweet__author\">\r\n                        <h2 className=\"tweet__user\" title=\"\"></h2>\r\n                        <p className=\"tweet__at\"></p>\r\n                    </div>\r\n                    {/* Corpo do tweet */}\r\n                    <p className=\"tweet__text\"></p>\r\n                    {/* Link para o Twitter */}\r\n                    <a href=\"https://www.twitter.com/\"\r\n                        target=\"_blank\"\r\n                        rel=\"noopener noreferrer\"\r\n                        tabIndex=\"-1\">\r\n                        <p className=\"tweet__link\">Ver mais no Twitter</p>\r\n                    </a>\r\n                </div>\r\n            </li>\r\n        );\r\n    }\r\n}","// Import base do React\r\nimport React from 'react';\r\n// Importar componentes\r\nimport Header from '../common/Header';\r\nimport Image from './Image';\r\nimport Tweet from './Tweet';\r\n// Importar imagens\r\nimport searchIcon from './icon-search.svg';\r\n// Importar CSS\r\nimport './index.css';\r\n\r\n// Página principal\r\nexport default class Home extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let viewImage = function() {return undefined};\r\n        let changeTab = function() {return undefined};\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        // Elementos das abas de resultado\r\n        const tabs = document.querySelectorAll('.tab');\r\n        const imageList = document.querySelector('.result__imageList');\r\n        const tweetList = document.querySelector('.result__tweetList');\r\n        // Elemento da barra de busca\r\n        const searchInput = document.querySelector('.search__input');\r\n        const searchFeedback = document.querySelector('.search__feedback');\r\n        const searchText = document.querySelector('#hashtag');\r\n        // Elementos preenchidos pelos tweets buscados\r\n        const resultBlock = document.querySelector('.result');\r\n        const tweetBlocks = document.querySelectorAll('.tweet');\r\n        const tweetImages = document.querySelectorAll('.tweet__image');\r\n        const tweetNames = document.querySelectorAll('.tweet__user');\r\n        const tweetHandles = document.querySelectorAll('.tweet__at');\r\n        const tweetTexts = document.querySelectorAll('.tweet__text');\r\n        const tweetLinks = document.querySelectorAll('.tweet__link');\r\n        // Elementos preenchidos pelas imagens buscadas\r\n        const images = document.querySelectorAll('.image');\r\n        const imageUsers = document.querySelectorAll('.image__user');\r\n        // Visualização ampliada da imagem\r\n        const imageView = document.querySelector('.view');\r\n        const imageLarge = document.querySelector('.view__image');\r\n        // Elementos do header usados no controle de foco\r\n        const logo = document.querySelector('.header__logo').parentElement;\r\n        const nav = document.querySelectorAll('.header__button');\r\n        // Variável para checar se uma busca está sendo realizada\r\n        let isSearching = false;\r\n        // Referência ao body\r\n        const bodyElement = document.querySelector('body');\r\n\r\n\r\n        // Função que será rodada sempre que o usuário mexer no scroll da página\r\n        function animateScroll() {\r\n            // Ignorar o processo se o bloco de resultados estiver invisível\r\n            if (resultBlock.style.display != 'block') {\r\n                return;\r\n            }\r\n            // Variável que irá conter a posição de cada elemento\r\n            let rect;\r\n            // Para cada imagem/tweet:\r\n            for (let i=0; i<10; i++) {\r\n                \r\n                // Tweet:\r\n                rect = tweetBlocks[i].getBoundingClientRect();\r\n                // Se o elemento estiver visível dentro da janela e tiver conteúdo\r\n                if (tweetBlocks[i].classList.contains('tweet_content') &&\r\n                    (rect.top <= document.documentElement.clientHeight - rect.height ||\r\n                        // Ou se o scroll estiver no fim da página\r\n                        bodyElement.getBoundingClientRect().bottom - window.innerHeight <= 0)) {\r\n                    // Adicionar a classe que mudará suas propriedades CSS\r\n                    tweetBlocks[i].classList.add('tweet_visible');\r\n                }\r\n\r\n                // Imagem:\r\n                rect = images[i].getBoundingClientRect();\r\n                // Se o elemento estiver visível dentro da janela e tiver conteúdo\r\n                if (images[i].classList.contains('image_content') &&\r\n                    (rect.top <= document.documentElement.clientHeight - (rect.height * 0.5) ||\r\n                        // Ou se o scroll estiver no fim da página\r\n                        bodyElement.getBoundingClientRect().bottom - window.innerHeight <= 0)) {\r\n                    // Adicionar a classe que mudará suas propriedades CSS\r\n                    images[i].classList.add('image_visible');\r\n                    // Adicionar funções para expandir a imagem por mouse e teclado\r\n                    images[i].onclick = () => {viewImage(i)};\r\n                    images[i].onkeypress = (e) => {\r\n                        let code = e.charCode || e.keyCode;\r\n                        // Reagir às teclas Enter e Space\r\n                        if(code === 32 || code === 13) {\r\n                            // No caso do Space, prevenir o scroll padrão\r\n                            e.preventDefault();\r\n                            viewImage(i);\r\n                        }\r\n                    };\r\n                }\r\n            }\r\n        }\r\n        // Chamar a função ao carregar a página, e depois sempre que o usuário mexer no scroll\r\n        animateScroll();\r\n        bodyElement.onscroll = animateScroll;\r\n\r\n\r\n        // Função que busca tweets com a hashtag fornecida\r\n        function search(hashtag) {\r\n            // Se uma busca está sendo realizada, instruir o usuário a aguardar\r\n            if (isSearching) {\r\n                searchFeedback.textContent = \"Aguarde a finalização da busca anterior\";\r\n                return;\r\n            }\r\n            // Marcar através da variável global que uma nova busca está em progresso\r\n            isSearching = true;\r\n\r\n            // Função que será atribuída à propriedade \"onstatechange\" das requisições ao Twitter\r\n            function displayResults() {\r\n                // Verificar se ambas as buscas estão completas\r\n                if (twitterRequest.readyState == 4 && twitterRequest.status == 200 &&\r\n                    imageRequest.readyState == 4 && imageRequest.status == 200) {\r\n\r\n                    // Transformar os resultados de ambas em JSON\r\n                    let results = JSON.parse(twitterRequest.responseText);\r\n                    let imageResults = JSON.parse(imageRequest.responseText);\r\n                    // Variável que será usada para iterar os resultados\r\n                    let tweet;\r\n\r\n                    // Se não houver nenhum resultado\r\n                    if (results.statuses.length <= 0 &&\r\n                        imageResults.statuses.length <= 0) {\r\n\r\n                        // Esconder o bloco dos resultados e notificar o usuário\r\n                        resultBlock.style.display = \"\";\r\n                        searchFeedback.textContent = \"Não foi encontrado nenhum resultado :(\";\r\n                        // Encerrar a busca\r\n                        isSearching = false;\r\n                        return;\r\n                    }\r\n\r\n                    // Para cada um dos 10 elementos de tweet/imagem no DOM\r\n                    for (let i=0; i<10; i++) {\r\n                        // Resetar a visibilidade dos elementos em que ela está presente\r\n                        tweetBlocks[i].classList.remove('tweet_visible');\r\n                        images[i].classList.remove('image_visible');\r\n                        // Se houver um resultado para colocar no bloco de tweet \"i\"\r\n                        if (i < results.statuses.length) {\r\n                            // Marcar o tweet com a classe \"content\"\r\n                            tweet = results.statuses[i];\r\n                            tweetBlocks[i].classList.add('tweet_content');\r\n                            // Atribuir aos elementos as propriedades do resultado\r\n                            tweetImages[i].src = tweet.user.profile_image_url_https;\r\n                            tweetNames[i].textContent = tweet.user.name;\r\n                            tweetNames[i].setAttribute(\r\n                                'title',\r\n                                tweetNames[i].textContent\r\n                            );\r\n                            tweetHandles[i].textContent = \"@\" + tweet.user.screen_name;\r\n                            tweetTexts[i].textContent = tweet.full_text;\r\n                            tweetLinks[i].parentElement.setAttribute(\r\n                                'href',\r\n                                \"https://twitter.com/\" + tweet.user.screen_name\r\n                            );\r\n                            tweetLinks[i].parentElement.tabIndex = \"0\";\r\n                        // Se NÃO houver um resultado para colocar no bloco de tweet \"i\"\r\n                        } else {\r\n                            // Remover o marcador de \"content\" caso ele exista por causa de uma pesquisa anterior\r\n                            tweetBlocks[i].classList.remove('tweet_content');\r\n                            tweetLinks[i].parentElement.tabIndex = \"-1\";\r\n                        }\r\n\r\n                        // Se houver um resultado para colocar no bloco de imagem \"i\"\r\n                        if (i < imageResults.statuses.length) {\r\n                            // Marcar a imagem com a classe \"content\"\r\n                            images[i].classList.add('image_content');\r\n                            // Atribuir aos elementos as propriedades do resultado\r\n                            images[i].tabIndex = \"0\"\r\n                            images[i].setAttribute(\r\n                                'data-src',\r\n                                imageResults.statuses[i].entities.media[0].media_url_https\r\n                            );\r\n                            images[i].style.background =\r\n                                \"linear-gradient(180deg, #00000000 0%, #000000c4 100%) no-repeat, url(\" +\r\n                                imageResults.statuses[i].entities.media[0].media_url_https + \") no-repeat\";\r\n                            images[i].style.backgroundSize = \"100% 40%, cover\";\r\n                            images[i].style.backgroundPosition = \"0% 100%, center\";\r\n                            imageUsers[i].textContent = \"@\" + imageResults.statuses[i].user.screen_name;\r\n                            imageUsers[i].setAttribute(\r\n                                'title',\r\n                                imageUsers[i].textContent\r\n                            );\r\n                            imageUsers[i].parentElement.setAttribute(\r\n                                'href',\r\n                                \"https://twitter.com/\" + imageResults.statuses[i].user.screen_name\r\n                            );\r\n                            imageUsers[i].parentElement.tabIndex = \"0\";\r\n                        // Se NÃO houver um resultado para colocar no bloco de imagem \"i\"\r\n                        } else {\r\n                            // Remover o marcador de \"content\" caso ele exista por causa de uma pesquisa anterior\r\n                            images[i].classList.remove('image_content');\r\n                            images[i].tabIndex = \"-1\"\r\n                            imageUsers[i].parentElement.tabIndex = \"-1\";\r\n                        }\r\n                    }\r\n                    // Tornar o bloco de resultado visível sobrepondo o CSS\r\n                    resultBlock.style.display = \"block\";\r\n                    // Mover o scroll para o topo do bloco\r\n                    resultBlock.scrollIntoView({behavior: \"smooth\", block: \"start\"});\r\n                    // Atualizar o texto e encerrar a busca\r\n                    searchFeedback.textContent = \"\";\r\n                    searchText.textContent = hashtag;\r\n                    isSearching = false;\r\n                }\r\n            }\r\n\r\n            // Criar as duas requisições que serão feitas\r\n            let twitterRequest = new XMLHttpRequest();\r\n            let imageRequest = new XMLHttpRequest();\r\n            // Atribuir a ambas a função displayResults() para quando as duas estiverem prontas\r\n            twitterRequest.onreadystatechange = function() {\r\n                displayResults();\r\n            }\r\n            imageRequest.onreadystatechange = function() {\r\n                displayResults();\r\n            }\r\n\r\n            // A primeira requisição busca todos os tweets com a hashtag fornecida\r\n            twitterRequest.open(\r\n                \"GET\",\r\n                // Parametros adicionais:\r\n                // - Excluir retweets\r\n                // - Excluir conteúdo potencialmente sensível\r\n                // - Ordenas por mais recente\r\n                // - Extender os tweets (impedir que acabem em \"...\" se forem longos)\r\n                // - Apenas 10 resultados\r\n                \"https://cors-anywhere.herokuapp.com/https://api.twitter.com/1.1/search/tweets.json?q=%23\" + \r\n                    hashtag + \"%20-filter%3Aretweets%20filter%3Asafe&result_type=recent&tweet_mode=extended&count=10\"\r\n            );\r\n            // Header HTTP de autorização\r\n            twitterRequest.setRequestHeader(\r\n                \"Authorization\",\r\n                \"Bearer AAAAAAAAAAAAAAAAAAAAAH14HQEAAAAAlyRPi0Q1A7u87pMOdF2PPCKY7ME%3D7kmJegvv6xkK8aZH9ZFyr3KX4OVM3mPiyeFqpwDoarFuyMiJre\"\r\n            );\r\n\r\n            // A segunda requisição busca apenas tweets com imagens contendo a hashtag fornecida\r\n            imageRequest.open(\r\n                \"GET\",\r\n                // Parametros adicionais:\r\n                // - Excluir retweets\r\n                // - Excluir conteúdo potencialmente sensível\r\n                // - Incluir apenas resultados contendo imagens\r\n                // - Ordenas por mais recente\r\n                // - Extender os tweets (impedir que acabem em \"...\" se forem longos)\r\n                // - Apenas 10 resultados\r\n                \"https://cors-anywhere.herokuapp.com/https://api.twitter.com/1.1/search/tweets.json?q=%23\" + \r\n                    hashtag + \"%20-filter%3Aretweets%20filter%3Asafe%20filter%3Aimages&result_type=recent&tweet_mode=extended&count=10\"\r\n            );\r\n            // Header HTTP de autorização\r\n            imageRequest.setRequestHeader(\r\n                \"Authorization\",\r\n                \"Bearer AAAAAAAAAAAAAAAAAAAAAH14HQEAAAAAlyRPi0Q1A7u87pMOdF2PPCKY7ME%3D7kmJegvv6xkK8aZH9ZFyr3KX4OVM3mPiyeFqpwDoarFuyMiJre\"\r\n            );\r\n\r\n            // Enviar as requisições e aguardar que displayResults() seja chamada\r\n            twitterRequest.send();\r\n            imageRequest.send();\r\n        }\r\n\r\n\r\n        // Atribuir a função de pesquisa à tecla Enter quando usada no input de busca\r\n        searchInput.addEventListener(\r\n            'keyup',\r\n            function(event) {\r\n                // Se a tecla pressionada for Enter\r\n                if (event.keyCode == 13) {\r\n                    // Prevenir qualquer outro comportamento associado à tecla\r\n                    event.preventDefault();\r\n                    // Remover símbolos não aceitos em hashtags\r\n                    searchInput.value = searchInput.value.replace(/[^a-zA-Z0-9_]/g, '');\r\n                    // Se o campo estiver vazio, apenas informar o usuário quais caracteres são permitidos\r\n                    if (searchInput.value === '') {\r\n                        searchFeedback.textContent = 'Digite algo no campo de busca (apenas letras, números e underlines)';\r\n                    // Se não, pedir o aguardo e realizar a busca\r\n                    } else {\r\n                        searchFeedback.textContent = 'Aguarde um momento...';\r\n                        search(searchInput.value);\r\n                    }\r\n                }\r\n            }\r\n        );\r\n\r\n\r\n        // Função que muda a aba de resultados na versão mobile\r\n        function changeTab(tab) {\r\n            if (tab == 0) {\r\n                tabs[0].classList.add('tab_selected');\r\n                tabs[1].classList.remove('tab_selected');\r\n                imageList.classList.remove('result__imageList_hidden');\r\n                tweetList.classList.add('result__tweetList_hidden');\r\n            } else {\r\n                tabs[0].classList.remove('tab_selected');\r\n                tabs[1].classList.add('tab_selected');\r\n                imageList.classList.add('result__imageList_hidden');\r\n                tweetList.classList.remove('result__tweetList_hidden');\r\n            }\r\n            // Resetar a visibilidade dos elementos para que a transição se repita ao mudar de aba\r\n            for (let i=0; i<10; i++) {\r\n                tweetBlocks[i].classList.remove('tweet_visible');\r\n                images[i].classList.remove('image_visible');\r\n            }\r\n            animateScroll();\r\n        }\r\n\r\n\r\n        // Função que é chamada ao clicar uma imagem, exibindo-a em tela inteira\r\n        function viewImage(imageIndex) {\r\n            // Usar o valor falso como função de fechar a exibição\r\n            if (imageIndex === false) {\r\n                // Remover as propriedades\r\n                imageView.style.display = \"\";\r\n                imageLarge.src = \"\";\r\n                // Reabilitar o foco de outros elementos que precisam\r\n                focusControl(true);\r\n            // Se for passado um valor numérico\r\n            } else {\r\n                // Mudar o display e o atributo da imagem\r\n                imageView.style.display = \"flex\";\r\n                imageLarge.src = images[imageIndex].getAttribute('data-src');\r\n                // Desabilitar o foco de todos os outros elementos\r\n                focusControl(false);\r\n            }\r\n        }\r\n\r\n\r\n        // Função que habilita ou desabilita o foco dos elementos interativos abaixo do bloco view\r\n        function focusControl(enable) {\r\n            // Novo tabIndex que será atribuído a todo esse grupo de elementos\r\n            let newIndex = enable ? 0 : -1;\r\n            // Checar todos os 10 elementos de tweet e imagem\r\n            for (let i=0; i<10; i++) {\r\n                // Se o foco for desabilitado, checar se a imagem tem conteúdo \r\n                if (enable == false ||\r\n                    images[i].classList.contains(\"image_content\")) {\r\n                    // Alterar o tabIndex\r\n                    images[i].tabIndex = newIndex;\r\n                    imageUsers[i].parentElement.tabIndex = newIndex;\r\n                }\r\n                // Se o foco for desabilitado, checar se o tweet tem conteúdo \r\n                if (enable == false ||\r\n                    tweetBlocks[i].classList.contains(\"tweet_content\")) {\r\n                    // Alterar o tabIndex\r\n                    tweetLinks[i].parentElement.tabIndex = newIndex;\r\n                }\r\n            }\r\n            // Outros elementos com foco:\r\n            // Logo\r\n            logo.tabIndex = newIndex;\r\n            // Botões do header\r\n            nav[0].tabIndex = newIndex;\r\n            nav[1].tabIndex = newIndex;\r\n            // Campo de busca\r\n            searchInput.tabIndex = newIndex;\r\n            // Abas de resultado\r\n            tabs[0].tabIndex = newIndex;\r\n            tabs[1].tabIndex = newIndex;\r\n        }\r\n        this.viewImage = viewImage;\r\n        this.changeTab = changeTab;\r\n    }\r\n\r\n    render() {\r\n        console.log(\"1\");\r\n        return(\r\n\r\n            <div className=\"root\">\r\n\r\n                {/* Menu e navegação */}\r\n                <Header />\r\n\r\n                {/* Bloco de busca */}\r\n                <main className=\"search\">\r\n\r\n                    {/* Título e texto */}\r\n                    <h1 className=\"search__title\">Encontre hashtags de maneira fácil.</h1>\r\n                    <p className=\"search__text\">\r\n                        Digite o que deseja no campo de buscas e confira os resultados do Twitter abaixo\r\n                    </p>\r\n\r\n                    {/* Barra de busca */}\r\n                    <div className=\"search__bar\">\r\n                        {/* Ícone de busca */}\r\n                        <img\r\n                            className=\"search__icon\"\r\n                            src={searchIcon}\r\n                            alt=\"Ícone de busca\"\r\n                        />\r\n                        {/* Input de texto */}\r\n                        <input\r\n                            className=\"search__input\"\r\n                            type=\"text\"\r\n                            name=\"search\"\r\n                            placeholder=\"Buscar...\"\r\n                            spellCheck=\"false\"\r\n                            maxLength=\"140\"\r\n                            tabIndex=\"0\"\r\n                        />\r\n                    </div>\r\n                    {/* Texto que informa o usuário do estado atual da busca */}\r\n                    <p className=\"search__feedback\"></p>\r\n                </main>\r\n\r\n                {/* Bloco dos resultados - visível somente após realizada uma busca */}\r\n                <div className=\"result\">\r\n\r\n                    {/* Tabs para selecionar qual tipo de resultado é mostrado - visível e necessário somente em mobile */}\r\n                    <div className=\"result__type\">\r\n                        {/* Tab de Imagens */}\r\n                        <button className=\"result__tab tab\"\r\n                            onClick={() => {this.changeTab(0)}}\r\n                            tabIndex=\"0\">\r\n                            Imagens\r\n                        </button>\r\n                        {/* Tab de Tweets */}\r\n                        <button className=\"result__tab tab tab_selected\"\r\n                            onClick={() => {this.changeTab(1)}}\r\n                            tabIndex=\"0\">\r\n                            Tweets\r\n                        </button>\r\n                    </div>\r\n\r\n                    {/* Texto de feedback da busca */}\r\n                    <p className=\"result__text\">\r\n                        Exibindo os 10 resultados mais recentes para #<span id=\"hashtag\">natureza</span>\r\n                    </p>\r\n\r\n                    {/* Resultados da busca */}\r\n                    <div className=\"result__box\">\r\n                        {/* Lista de imagens */}\r\n                        <ul className=\"result__imageList result__imageList_hidden\">\r\n                            {/* Imagens 1-10 */}\r\n                            <Image />\r\n                            <Image />\r\n                            <Image />\r\n                            <Image />\r\n                            <Image />\r\n                            <Image />\r\n                            <Image />\r\n                            <Image />\r\n                            <Image />\r\n                            <Image />\r\n                        </ul>\r\n\r\n                        {/* Lista de tweets */}\r\n                        <ul className=\"result__tweetList\">\r\n                            {/* Tweets 1-10 */}\r\n                            <Tweet />\r\n                            <Tweet />\r\n                            <Tweet />\r\n                            <Tweet />\r\n                            <Tweet />\r\n                            <Tweet />\r\n                            <Tweet />\r\n                            <Tweet />\r\n                            <Tweet />\r\n                            <Tweet />\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Rodapé da página */}\r\n                <footer className=\"footer\">\r\n                    {/* Texto do rodapé */}\r\n                    <p className=\"footer__text\">© Cocreare 2020. Todos os direitos reservados</p>\r\n                </footer>\r\n\r\n                {/* Visualização de imagem, só é visível quando uma imagem é clicada */}\r\n                <div className=\"view\">\r\n                    {/* Botão que esconde a visualização */}\r\n                    <button className=\"view__close button button_theme_light\" onClick={() => this.viewImage(false)}>\r\n                        X\r\n                    </button>\r\n                    {/* Imagem do resultado, ampliada */}\r\n                    <img className=\"view__image\"\r\n                        src=\"\"\r\n                        alt=\"\"\r\n                    />\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}","// Importar base do React\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n// Importar componentes\nimport Home from './pages/home/Home';\n\n// Renderizar\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Home />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);"],"sourceRoot":""}